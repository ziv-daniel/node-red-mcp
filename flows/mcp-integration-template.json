[
  {
    "id": "mcp-server-monitor",
    "type": "tab",
    "label": "MCP Server Monitor",
    "disabled": false,
    "info": "Monitor and interact with the MCP Node-RED server using Node-RED v4 features",
    "env": []
  },
  {
    "id": "http-health-check",
    "type": "http request",
    "z": "mcp-server-monitor",
    "name": "Health Check",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/health",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 250,
    "y": 100,
    "wires": [["health-status-parser"]]
  },
  {
    "id": "health-status-parser",
    "type": "function",
    "z": "mcp-server-monitor",
    "name": "Parse Health Status",
    "func": "// Node-RED v4 enhanced function node\n// Parse MCP server health response\n\nconst healthData = msg.payload;\n\n// Validate health response structure\nif (!healthData || typeof healthData !== 'object') {\n    msg.payload = {\n        status: 'error',\n        message: 'Invalid health response',\n        timestamp: new Date().toISOString()\n    };\n    return [null, msg]; // Send to error output\n}\n\n// Extract key metrics\nconst status = {\n    server: healthData.status || 'unknown',\n    timestamp: healthData.timestamp || new Date().toISOString(),\n    uptime: healthData.uptime || 0,\n    memory: healthData.memory || {},\n    connections: healthData.connections || 0\n};\n\n// Set status indicator\nif (status.server === 'healthy') {\n    node.status({fill: 'green', shape: 'dot', text: 'Healthy'});\n} else {\n    node.status({fill: 'red', shape: 'dot', text: 'Unhealthy'});\n}\n\nmsg.payload = status;\nreturn [msg, null]; // Send to success output",
    "outputs": 2,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 450,
    "y": 100,
    "wires": [["health-dashboard"], ["error-handler"]]
  },
  {
    "id": "health-dashboard",
    "type": "ui_text",
    "z": "mcp-server-monitor",
    "group": "mcp-status",
    "order": 1,
    "width": 6,
    "height": 1,
    "name": "Server Status",
    "label": "MCP Server Status",
    "format": "{{msg.payload.server}}",
    "layout": "row-spread",
    "className": "",
    "x": 650,
    "y": 80,
    "wires": []
  },
  {
    "id": "error-handler",
    "type": "debug",
    "z": "mcp-server-monitor",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 650,
    "y": 140,
    "wires": []
  },
  {
    "id": "timer-trigger",
    "type": "inject",
    "z": "mcp-server-monitor",
    "name": "Every 30 seconds",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "30",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 100,
    "wires": [["http-health-check"]]
  },
  {
    "id": "sse-listener",
    "type": "websocket in",
    "z": "mcp-server-monitor",
    "name": "SSE Events",
    "server": "sse-server-config",
    "client": "",
    "x": 130,
    "y": 200,
    "wires": [["sse-event-parser"]]
  },
  {
    "id": "sse-event-parser",
    "type": "function",
    "z": "mcp-server-monitor",
    "name": "Parse SSE Event",
    "func": "// Parse Server-Sent Events from MCP server\n// Node-RED v4 enhanced event handling\n\ntry {\n    const eventData = JSON.parse(msg.payload);\n    \n    // Enrich event data\n    const processedEvent = {\n        ...eventData,\n        receivedAt: new Date().toISOString(),\n        source: 'mcp-server'\n    };\n    \n    // Route based on event type\n    switch (eventData.event) {\n        case 'flow-deployed':\n            node.status({fill: 'blue', shape: 'dot', text: 'Flow Deployed'});\n            return [processedEvent, null, null];\n            \n        case 'node-error':\n            node.status({fill: 'red', shape: 'dot', text: 'Node Error'});\n            return [null, processedEvent, null];\n            \n        case 'system-status':\n            node.status({fill: 'green', shape: 'dot', text: 'System Update'});\n            return [null, null, processedEvent];\n            \n        default:\n            return [processedEvent, null, null];\n    }\n    \n} catch (error) {\n    node.error('Failed to parse SSE event: ' + error.message, msg);\n    return [null, null, null];\n}",
    "outputs": 3,
    "timeout": 0,
    "noerr": 1,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 200,
    "wires": [["general-events"], ["error-events"], ["system-events"]]
  },
  {
    "id": "general-events",
    "type": "debug",
    "z": "mcp-server-monitor",
    "name": "General Events",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 180,
    "wires": []
  },
  {
    "id": "error-events",
    "type": "debug",
    "z": "mcp-server-monitor",
    "name": "Error Events",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 200,
    "wires": []
  },
  {
    "id": "system-events",
    "type": "debug",
    "z": "mcp-server-monitor",
    "name": "System Events",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 550,
    "y": 220,
    "wires": []
  },
  {
    "id": "mcp-status",
    "type": "ui_group",
    "name": "MCP Server Status",
    "tab": "main-dashboard",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false,
    "className": ""
  },
  {
    "id": "main-dashboard",
    "type": "ui_tab",
    "name": "MCP Dashboard",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "sse-server-config",
    "type": "websocket-listener",
    "path": "/api/events",
    "wholemsg": "false"
  }
]
