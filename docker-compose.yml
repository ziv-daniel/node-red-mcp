#
# Docker Compose for MCP Node-RED Server
# 2025 Development & Production Configuration
#

version: '3.8'

# Common environment variables
x-common-env: &common-env
  NODE_ENV: development
  LOG_LEVEL: info
  TZ: UTC

x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

networks:
  mcp-network:
    driver: bridge
    name: mcp-nodered-network

volumes:
  nodered_data:
    name: nodered_data
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data
  grafana_data:
    name: grafana_data
  prometheus_data:
    name: prometheus_data

services:
  # ==========================================================================
  # MCP Node-RED Server (Main Application)
  # ==========================================================================
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development # Use development target for local development
      args:
        NODE_VERSION: 22
        YARN_VERSION: 4.9.4
    container_name: mcp-nodered-server
    hostname: mcp-server
    restart: unless-stopped

    environment:
      <<: *common-env
      NODE_ENV: development
      MCP_TRANSPORT: both
      HTTP_ENABLED: 'true'
      PORT: 3000

      # Node-RED Configuration
      NODERED_URL: http://nodered:1880
      NODERED_USERNAME: ${NODERED_USERNAME:-admin}
      NODERED_PASSWORD: ${NODERED_PASSWORD:-password}

      # Security Configuration
      JWT_SECRET: ${JWT_SECRET:-dev-secret-change-in-production-min-32-chars}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}

      # Rate Limiting
      RATE_LIMIT_WINDOW: 900000 # 15 minutes
      RATE_LIMIT_MAX: 100

      # Database Configuration (optional)
      DATABASE_URL: ${DATABASE_URL:-postgresql://mcpuser:mcppass@postgres:5432/mcpdb}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}

      # Observability
      ENABLE_METRICS: 'true'
      ENABLE_TRACING: 'true'
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:14268

    ports:
      - '${MCP_PORT:-3000}:3000'
      - '${MCP_DEBUG_PORT:-9229}:9229' # Node.js debugging

    volumes:
      # Development: mount source code for hot reload
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./flows:/app/flows

    depends_on:
      - nodered
      - postgres
      - redis

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mcp-server.rule=Host(`mcp.localhost`)'
      - 'traefik.http.services.mcp-server.loadbalancer.server.port=3000'

  # ==========================================================================
  # Node-RED Instance
  # ==========================================================================
  nodered:
    image: nodered/node-red:4.0.8-22
    container_name: nodered
    hostname: nodered
    restart: unless-stopped

    environment:
      <<: *common-env
      NODE_ENV: development
      NODE_RED_CREDENTIAL_SECRET: ${NODE_RED_CREDENTIAL_SECRET:-dev-credential-secret}

    ports:
      - '${NODERED_PORT:-1880}:1880'

    volumes:
      - nodered_data:/data
      - ./flows:/data/flows:ro # Read-only access to flow templates
      - ./e2e/node-red-settings.js:/data/settings.js:ro

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'curl', '-f', 'http://localhost:1880']

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.nodered.rule=Host(`nodered.localhost`)'
      - 'traefik.http.services.nodered.loadbalancer.server.port=1880'

  # ==========================================================================
  # Database (PostgreSQL)
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped

    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcpdb}
      POSTGRES_USER: ${POSTGRES_USER:-mcpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcppass}
      PGDATA: /var/lib/postgresql/data/pgdata

    ports:
      - '${POSTGRES_PORT:-5432}:5432'

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-mcpuser} -d ${POSTGRES_DB:-mcpdb}']

  # ==========================================================================
  # Redis (Caching & Session Storage)
  # ==========================================================================
  redis:
    image: redis:7.2-alpine
    container_name: redis
    hostname: redis
    restart: unless-stopped

    environment:
      <<: *common-env

    ports:
      - '${REDIS_PORT:-6379}:6379'

    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro

    command: redis-server /usr/local/etc/redis/redis.conf

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'redis-cli', 'ping']

  # ==========================================================================
  # Observability Stack
  # ==========================================================================

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped

    environment:
      <<: *common-env

    ports:
      - '${PROMETHEUS_PORT:-9090}:9090'

    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:9090/-/healthy']

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    restart: unless-stopped

    environment:
      <<: *common-env
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource

    ports:
      - '${GRAFANA_PORT:-3001}:3000'

    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro

    depends_on:
      - prometheus

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    restart: unless-stopped

    environment:
      <<: *common-env
      COLLECTOR_OTLP_ENABLED: true

    ports:
      - '${JAEGER_PORT:-16686}:16686' # Jaeger UI
      - '14268:14268' # jaeger.thrift over HTTP
      - '4317:4317' # OTLP gRPC receiver
      - '4318:4318' # OTLP HTTP receiver

    networks:
      - mcp-network

    healthcheck:
      <<: *common-healthcheck
      test: ['CMD', 'wget', '-q', '--spider', 'http://localhost:16686']

  # ==========================================================================
  # Reverse Proxy & Load Balancer
  # ==========================================================================
  traefik:
    image: traefik:v3.0
    container_name: traefik
    hostname: traefik
    restart: unless-stopped

    environment:
      <<: *common-env

    ports:
      - '${TRAEFIK_HTTP_PORT:-80}:80'
      - '${TRAEFIK_HTTPS_PORT:-443}:443'
      - '${TRAEFIK_DASHBOARD_PORT:-8080}:8080'

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro

    networks:
      - mcp-network

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.localhost`)'
      - 'traefik.http.services.traefik.loadbalancer.server.port=8080'

  # ==========================================================================
  # Development Tools
  # ==========================================================================

  # Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    hostname: mailhog
    restart: unless-stopped
    profiles:
      - development

    environment:
      <<: *common-env

    ports:
      - '${MAILHOG_WEB_PORT:-8025}:8025' # Web UI
      - '${MAILHOG_SMTP_PORT:-1025}:1025' # SMTP

    networks:
      - mcp-network

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.mailhog.rule=Host(`mail.localhost`)'
      - 'traefik.http.services.mailhog.loadbalancer.server.port=8025'

  # Adminer (Database Administration)
  adminer:
    image: adminer:latest
    container_name: adminer
    hostname: adminer
    restart: unless-stopped
    profiles:
      - development

    environment:
      <<: *common-env
      ADMINER_DEFAULT_SERVER: postgres

    ports:
      - '${ADMINER_PORT:-8081}:8080'

    depends_on:
      - postgres

    networks:
      - mcp-network

    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.adminer.rule=Host(`db.localhost`)'
      - 'traefik.http.services.adminer.loadbalancer.server.port=8080'
